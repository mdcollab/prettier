// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`as.js 1`] = `
const name = (description as DescriptionObject).name || (description as string);
this.isTabActionBar((e.target || e.srcElement) as HTMLElement);
(originalError ? wrappedError(errMsg, originalError) : Error(errMsg)) as InjectionError;
'current' in (props.pagination as Object)
start + (yearSelectTotal as number)
scrollTop > (visibilityHeight as number)
export default class Column<T> extends (RcTable.Column as React.ComponentClass<ColumnProps<T>>) {}
({}) as {};
function*g() {
  const test = (yield 'foo') as number;
}
async function g() {
  const test = (await 'foo') as number;
}
({}) as X;
() => ({}) as X;
const state = JSON.stringify({
  next: window.location.href,
  nonce,
} as State);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const name = (description as DescriptionObject).name || (description as string);
this.isTabActionBar((e.target || e.srcElement) as HTMLElement);
(originalError
  ? wrappedError(errMsg, originalError)
  : Error(errMsg)) as InjectionError;
"current" in (props.pagination as Object);
start + (yearSelectTotal as number);
scrollTop > (visibilityHeight as number);
export default class Column<T> extends (RcTable.Column as React.ComponentClass<
  ColumnProps<T>
>) {}
({} as {});
function* g() {
  const test = (yield "foo") as number;
}
async function g() {
  const test = (await "foo") as number;
}
({} as X);
() => ({} as X);
const state = JSON.stringify(
  {
    next: window.location.href,
    nonce
  } as State
);

`;
