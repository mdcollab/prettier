// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow.js 1`] = `
"function f() {
  const appEntitys = getAppEntitys(loadObject).filter(
    entity => entity && entity.isInstallAvailable() && !entity.isQueue() && entity.isDisabled()
  )
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function f() {
  const appEntitys = getAppEntitys(loadObject).filter(
    entity =>
      entity &&
      entity.isInstallAvailable() &&
      !entity.isQueue() &&
      entity.isDisabled()
  );
}
"
`;

exports[`comment.js 1`] = `
"a = (
  // Commment 1
  (Math.random() * (yRange * (1 - minVerticalFraction)))
  + (minVerticalFraction * yRange)
) - offset;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a =
  // Commment 1
  Math.random() * (yRange * (1 - minVerticalFraction)) +
  minVerticalFraction * yRange -
  offset;
"
`;

exports[`exp.js 1`] = `
"a ** b ** c;
(a ** b) ** c;
a.b ** c;
(-a) ** b;
a ** -b;
-(a**b);
(a * b) ** c;
a ** (b * c);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
a ** b ** c;
(a ** b) ** c;
a.b ** c;
(-a) ** b;
a ** -b;
-(a ** b);
(a * b) ** c;
a ** (b * c);
"
`;

exports[`inline-object-array.js 1`] = `
"prevState = prevState || {
  catalogs: [],
  loadState: LOADED,
  opened: false,
  searchQuery: '',
  selectedCatalog: null,
};

this.steps = steps || [
  {
    name: 'mock-module',
    path: '/nux/mock-module',
  },
];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
prevState = prevState || {
  catalogs: [],
  loadState: LOADED,
  opened: false,
  searchQuery: \\"\\",
  selectedCatalog: null
};

this.steps = steps || [
  {
    name: \\"mock-module\\",
    path: \\"/nux/mock-module\\"
  }
];
"
`;

exports[`short-right.js 1`] = `
"this._cumulativeHeights &&
 Math.abs(
   this._cachedItemHeight(this._firstVisibleIndex + i) -
     this._provider.fastHeight(i + this._firstVisibleIndex),
 ) >
   1

foooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(
  aaaaaaaaaaaaaaaaaaa
) +
  a;

const isPartOfPackageJSON = dependenciesArray.indexOf(
  dependencyWithOutRelativePath.split('/')[0],
) !== -1;

defaultContent.filter(defaultLocale => {
  // ...
})[0] || null;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
this._cumulativeHeights &&
  Math.abs(
    this._cachedItemHeight(this._firstVisibleIndex + i) -
      this._provider.fastHeight(i + this._firstVisibleIndex)
  ) > 1;

foooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(
  aaaaaaaaaaaaaaaaaaa
) + a;

const isPartOfPackageJSON =
  dependenciesArray.indexOf(dependencyWithOutRelativePath.split(\\"/\\")[0]) !== -1;

defaultContent.filter(defaultLocale => {
  // ...
})[0] || null;
"
`;

exports[`test.js 1`] = `
"// It should always break the highest precedence operators first, and
// break them all at the same time.

const x = longVariable + longVariable + longVariable;
const x = longVariable + longVariable + longVariable + longVariable - longVariable + longVariable;
const x = longVariable + longVariable * longVariable + longVariable - longVariable + longVariable;
const x = longVariable + longVariable * longVariable * longVariable / longVariable + longVariable;

const x = longVariable && longVariable && longVariable && longVariable && longVariable && longVariable;
const x = longVariable && longVariable || longVariable && longVariable || longVariable && longVariable;

const x = longVariable * longint && longVariable >> 0 && longVariable + longVariable;

const x = longVariable > longint && longVariable === 0 + longVariable * longVariable;

foo(obj.property * new Class() && obj instanceof Class && longVariable ? number + 5 : false);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// It should always break the highest precedence operators first, and
// break them all at the same time.

const x = longVariable + longVariable + longVariable;
const x =
  longVariable +
  longVariable +
  longVariable +
  longVariable -
  longVariable +
  longVariable;
const x =
  longVariable +
  longVariable * longVariable +
  longVariable -
  longVariable +
  longVariable;
const x =
  longVariable +
  longVariable * longVariable * longVariable / longVariable +
  longVariable;

const x =
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable &&
  longVariable;
const x =
  (longVariable && longVariable) ||
  (longVariable && longVariable) ||
  (longVariable && longVariable);

const x =
  longVariable * longint && longVariable >> 0 && longVariable + longVariable;

const x =
  longVariable > longint && longVariable === 0 + longVariable * longVariable;

foo(
  obj.property * new Class() && obj instanceof Class && longVariable
    ? number + 5
    : false
);
"
`;
